/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrExpr(node);
    }

    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndExpr(node);
    }

    public void inANotExpr(ANotExpr node)
    {
        defaultIn(node);
    }

    public void outANotExpr(ANotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr(ANotExpr node)
    {
        inANotExpr(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANotExpr(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubExpr(node);
    }

    public void inALtExpr(ALtExpr node)
    {
        defaultIn(node);
    }

    public void outALtExpr(ALtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpr(ALtExpr node)
    {
        inALtExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALtExpr(node);
    }

    public void inAGteqExpr(AGteqExpr node)
    {
        defaultIn(node);
    }

    public void outAGteqExpr(AGteqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqExpr(AGteqExpr node)
    {
        inAGteqExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGteqExpr(node);
    }

    public void inALteqExpr(ALteqExpr node)
    {
        defaultIn(node);
    }

    public void outALteqExpr(ALteqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqExpr(ALteqExpr node)
    {
        inALteqExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALteqExpr(node);
    }

    public void inAGtExpr(AGtExpr node)
    {
        defaultIn(node);
    }

    public void outAGtExpr(AGtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpr(AGtExpr node)
    {
        inAGtExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGtExpr(node);
    }

    public void inAEqExpr(AEqExpr node)
    {
        defaultIn(node);
    }

    public void outAEqExpr(AEqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpr(AEqExpr node)
    {
        inAEqExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqExpr(node);
    }

    public void inANeqExpr(ANeqExpr node)
    {
        defaultIn(node);
    }

    public void outANeqExpr(ANeqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqExpr(ANeqExpr node)
    {
        inANeqExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANeqExpr(node);
    }

    public void inAMulExpr(AMulExpr node)
    {
        defaultIn(node);
    }

    public void outAMulExpr(AMulExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpr(AMulExpr node)
    {
        inAMulExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMulExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpr(node);
    }

    public void inASignameExpr(ASignameExpr node)
    {
        defaultIn(node);
    }

    public void outASignameExpr(ASignameExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignameExpr(ASignameExpr node)
    {
        inASignameExpr(node);
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASignameExpr(node);
    }

    public void inAElementExpr(AElementExpr node)
    {
        defaultIn(node);
    }

    public void outAElementExpr(AElementExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementExpr(AElementExpr node)
    {
        inAElementExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getArrayindex() != null)
        {
            node.getArrayindex().apply(this);
        }
        outAElementExpr(node);
    }

    public void inAVarExpr(AVarExpr node)
    {
        defaultIn(node);
    }

    public void outAVarExpr(AVarExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpr(AVarExpr node)
    {
        inAVarExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarExpr(node);
    }

    public void inASignumberExpr(ASignumberExpr node)
    {
        defaultIn(node);
    }

    public void outASignumberExpr(ASignumberExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignumberExpr(ASignumberExpr node)
    {
        inASignumberExpr(node);
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outASignumberExpr(node);
    }

    public void inAIntExpr(AIntExpr node)
    {
        defaultIn(node);
    }

    public void outAIntExpr(AIntExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpr(AIntExpr node)
    {
        inAIntExpr(node);
        if(node.getIntVal() != null)
        {
            node.getIntVal().apply(this);
        }
        outAIntExpr(node);
    }

    public void inAFloatExpr(AFloatExpr node)
    {
        defaultIn(node);
    }

    public void outAFloatExpr(AFloatExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExpr(AFloatExpr node)
    {
        inAFloatExpr(node);
        if(node.getFloatVal() != null)
        {
            node.getFloatVal().apply(this);
        }
        outAFloatExpr(node);
    }

    public void inAStrExpr(AStrExpr node)
    {
        defaultIn(node);
    }

    public void outAStrExpr(AStrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrExpr(AStrExpr node)
    {
        inAStrExpr(node);
        if(node.getStrVal() != null)
        {
            node.getStrVal().apply(this);
        }
        outAStrExpr(node);
    }

    public void inABoolExpr(ABoolExpr node)
    {
        defaultIn(node);
    }

    public void outABoolExpr(ABoolExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolExpr(ABoolExpr node)
    {
        inABoolExpr(node);
        if(node.getBoolVal() != null)
        {
            node.getBoolVal().apply(this);
        }
        outABoolExpr(node);
    }
}
